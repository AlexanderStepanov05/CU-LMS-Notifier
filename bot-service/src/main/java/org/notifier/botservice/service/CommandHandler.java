package org.notifier.botservice.service;

import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.request.SendMessage;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class CommandHandler {

    private final UserService userService;

    public SendMessage handleUpdate(Update update) {
        if (update.message() == null) {
            return null;
        }

        Long chatId = update.message().chat().id();
        String text = update.message().text();
        String firstName = update.message().chat().firstName();
        String lastName = update.message().chat().lastName();
        String username = update.message().chat().username();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userService.registerUser(chatId, firstName, lastName, username);

        if (text == null) {
            return new SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã");
        }

        switch (text) {
            case "/start":
                return handleStart(chatId);
            case "/subscribe":
                return handleSubscribe(chatId);
            case "/unsubscribe":
                return handleUnsubscribe(chatId);
            case "/help":
                return handleHelp(chatId);
            default:
                return handleUnknownCommand(chatId);
        }
    }

    private SendMessage handleStart(Long chatId) {
        String welcomeMessage = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n" +
                "–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–∞—Ö.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n" +
                "/unsubscribe —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n" +
                "/help –¥–ª—è –ø–æ–º–æ—â–∏";

        return new SendMessage(chatId, welcomeMessage);
    }

    private SendMessage handleSubscribe(Long chatId) {
        userService.subscribeUser(chatId);
        return new SendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!");
    }

    private SendMessage handleUnsubscribe(Long chatId) {
        userService.unsubscribeUser(chatId);
        return new SendMessage(chatId, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. " +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.");
    }

    private SendMessage handleHelp(Long chatId) {
        String helpMessage = "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤\n" +
                "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É";

        return new SendMessage(chatId, helpMessage);
    }

    private SendMessage handleUnknownCommand(Long chatId) {
        return new SendMessage(chatId, "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥");
    }
}
