package org.notifier.notificationservice.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.notifier.notificationservice.client.BotServiceClient;
import org.notifier.notificationservice.client.ParserServiceClient;
import org.notifier.notificationservice.model.Course;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class NotificationService {

    private final ParserServiceClient parserServiceClient;
    private final BotServiceClient botServiceClient;

    // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (300000 –º—Å)
    @Scheduled(fixedRate = 300000)
    public void checkAndSendNotifications() {
        log.info("Starting notification check...");

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            List<Course> newCourses = parserServiceClient.getNewCourses();

            if (newCourses.isEmpty()) {
                log.info("No new courses found");
                return;
            }

            log.info("Found {} new courses", newCourses.size());

            // 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –∫—É—Ä—Å
            for (Course course : newCourses) {
                processCourse(course);
            }

        } catch (Exception e) {
            log.error("Error during notification processing", e);
        }
    }

    private void processCourse(Course course) {
        try {
            log.info("Processing course: {}", course.getTitle());

            // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            String message = formatCourseMessage(course);

            // 4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            List<Long> subscribers = getSubscribers();

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for (Long userId : subscribers) {
                sendNotification(userId, message);
            }

            // 6. –ü–æ–º–µ—á–∞–µ–º –∫—É—Ä—Å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            parserServiceClient.markCourseAsNotified(course.getCourseId());
            log.info("Course {} marked as notified", course.getCourseId());

        } catch (Exception e) {
            log.error("Failed to process course: {}", course.getCourseId(), e);
        }
    }

    private String formatCourseMessage(Course course) {
        return "üéì –ù–æ–≤—ã–π –∫—É—Ä—Å! üéì\n" +
                "**" + course.getTitle() + "**\n" +
                course.getDescription() + "\n\n" +
                "–°—Å—ã–ª–∫–∞: " + course.getUrl() + "\n" +
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: #" + course.getCategory();
    }

    private List<Long> getSubscribers() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
        return List.of(12345L, 67890L);
    }

    private void sendNotification(Long userId, String message) {
        try {
            // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞
            botServiceClient.sendNotification(userId, message);
            log.info("Notification sent to user: {}", userId);
        } catch (Exception e) {
            log.error("Failed to send notification to user: {}", userId, e);
        }
    }
}